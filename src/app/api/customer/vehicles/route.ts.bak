import { NextRequest, NextResponse } from 'next/server'
import { BookingService } from '@/lib/services/booking'
import { ApiResponseHandler } from '@/lib/api/response'
import { ApiValidation } from '@/lib/api/validation'
import { ApiAuth } from '@/lib/api/auth'
import { z } from 'zod'

const createVehicleSchema = z.object({
  vehicle_size_id: z.string().uuid('Invalid vehicle size ID'),
  make: z.string().min(1, 'Make is required').max(50),
  model: z.string().min(1, 'Model is required').max(100),
  year: z.number().int().min(1900).max(new Date().getFullYear() + 1).optional(),
  color: z.string().max(50).optional(),
  license_plate: z.string().max(20).optional(),
  notes: z.string().optional(),
  is_primary: z.boolean().default(false),
})

export async function GET(request: NextRequest) {
  try {
    const { auth, error: authError } = await ApiAuth.authenticate()
    if (authError) {
      return authError
    }

    const bookingService = new BookingService()
    const result = await bookingService.getCustomerVehicles(auth!.profile.id as string)

    if (!result.success) {
      return ApiResponseHandler.error(
        result.error?.message || 'Failed to fetch vehicles',
        'FETCH_VEHICLES_FAILED'
      )
    }

    return ApiResponseHandler.success(result.data, {
      pagination: {
        page: 1,
        limit: result.data?.length || 0,
        total: result.data?.length || 0,
        totalPages: 1
      }
    })

  } catch (error) {
    console.error('Get customer vehicles error:', error)
    return ApiResponseHandler.serverError('Failed to fetch vehicles')
  }
}

export async function POST(request: NextRequest) {
  try {
    const { auth, error: authError } = await ApiAuth.authenticate()
    if (authError) {
      return authError
    }

    const body = await request.json()
    const validation = await ApiValidation.validateBody(body, createVehicleSchema)
    if (!validation.success) {
      return validation.error
    }

    const bookingService = new BookingService()
    const result = await bookingService.createCustomerVehicle(auth!.profile.id as string, validation.data)

    if (!result.success) {
      return ApiResponseHandler.error(
        result.error?.message || 'Failed to create vehicle',
        'CREATE_VEHICLE_FAILED'
      )
    }

    return NextResponse.json({
      success: true,
      data: result.data,
      metadata: {
        timestamp: new Date().toISOString()
      }
    }, { status: 201 })

  } catch (error) {
    console.error('Create customer vehicle error:', error)
    return ApiResponseHandler.serverError('Failed to create vehicle')
  }
}