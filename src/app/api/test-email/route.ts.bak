import { NextRequest, NextResponse } from 'next/server'
import { EmailService } from '@/lib/services/email'
import { Booking } from '@/lib/utils/booking-types'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { type, email, name } = body

    if (!email || !name) {
      return NextResponse.json(
        { success: false, error: { message: 'Email and name are required' } },
        { status: 400 }
      )
    }

    const emailService = new EmailService()

    // Create a mock booking for testing
    const mockBooking: Booking = {
      id: 'test-id',
      booking_reference: 'L4D-TEST-1234',
      customer_id: 'test-customer',
      base_price: 50,
      vehicle_size_multiplier: 1.2,
      distance_surcharge: 5,
      total_price: 65,
      vehicle_details: {
        make: 'BMW',
        model: 'X5',
        year: 2021,
        color: 'Black',
        registration: 'ABC123',
        size_id: 'medium',
        size_name: 'Medium',
        size_multiplier: 1.2
      },
      service_address: {
        name: 'Test Address',
        address_line_1: '123 Test Street',
        city: 'London',
        postcode: 'SW1A 1AA'
      },
      distance_km: 15,
      estimated_duration: 120,
      status: 'pending',
      special_instructions: 'Please use the side entrance and avoid blocking the driveway.',
      scheduled_date: '2024-12-01',
      scheduled_start_time: '10:00',
      scheduled_end_time: '12:00',
      payment_status: 'pending',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }

    let result

    switch (type) {
      case 'booking-confirmation':
        result = await emailService.sendBookingConfirmation(email, name, mockBooking)
        break
      
      case 'admin-notification':
        result = await emailService.sendAdminBookingNotification(mockBooking, email, name)
        break
      
      case 'status-update':
        mockBooking.status = 'confirmed'
        result = await emailService.sendBookingStatusUpdate(email, name, mockBooking, 'pending', 'Booking confirmed by admin')
        break
      
      default:
        return NextResponse.json(
          { success: false, error: { message: 'Invalid email type. Use: booking-confirmation, admin-notification, or status-update' } },
          { status: 400 }
        )
    }

    if (result.success) {
      return NextResponse.json({
        success: true,
        data: { message: `${type} email sent successfully to ${email}` }
      })
    } else {
      return NextResponse.json(
        { success: false, error: { message: result.error || 'Failed to send email' } },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('Test email error:', error)
    return NextResponse.json(
      { success: false, error: { message: 'Internal server error' } },
      { status: 500 }
    )
  }
}